/*! dominate v0.1.0 | https://github.com/ryanmorr/dominate */
{"version":3,"sources":["dominate.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","global","factory","define","amd","mod","dominate","this","copyAttributes","el","target","attr","attrs","attributes","len","setAttribute","name","value","copyScript","doc","script","createElement","async","text","textContent","parseDocument","markup","type","parser","DOMParser","newDoc","parseFromString","removeChild","documentElement","parseHTML","tag","html","innerHTML","parse","supportsDOMParserHTML","_el","xml","_el2","firstChild","lastChild","wrap","wrapMap","_default","depth","childNodes","frag","createDocumentFragment","appendChild","_ref","arguments","undefined","_ref$context","context","document","_ref$type","_ref$scripts","scripts","toLowerCase","match","tagNameRe","exec","createTextNode","trim","parent","elements","querySelectorAll","parentNode","replaceChild","Object","defineProperty","thead","col","tr","td","tbody","tfoot","colgroup","caption","th","split","forEach"],"mappings":"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","file":"dominate.js","sourcesContent":["/*! dominate v0.1.0 | https://github.com/ryanmorr/dominate */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(['module', 'exports'], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(module, exports);\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod, mod.exports);\n        global.dominate = mod.exports;\n    }\n})(this, function (module, exports) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.default = dominate;\n    // Regex to extract the tag name\n    var tagNameRe = /<([\\w-]+)/;\n\n    // Determine if `DOMParser` supports 'text/html'\n    var supportsDOMParserHTML = function () {\n        try {\n            if (new DOMParser().parseFromString('', 'text/html')) {\n                return true;\n            }\n        } catch (e) {\n            return false;\n        }\n    }();\n\n    // Prevent the parser from ignoring certain\n    // elements by wrapping them with the necessary\n    // parent elements to appease XHTML compliance\n    // (courtesy of jQuery: https://github.com/jquery/jquery/blob/master/src/manipulation/wrapMap.js)\n    var wrapMap = {\n        thead: [1, '<table>', '</table>'],\n        col: [2, '<table><colgroup>', '</colgroup></table>'],\n        tr: [2, '<table><tbody>', '</tbody></table>'],\n        td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],\n        _default: [0, '', '']\n    };\n    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n    wrapMap.th = wrapMap.td;\n\n    // Support SVG elements\n    'circle ellipse g image line path polygon polyline rect text'.split(' ').forEach(function (tag) {\n        wrapMap[tag] = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\">', '</svg>'];\n    });\n\n    /**\r\n     * Copy the attributes from one node to another\r\n     *\r\n     * @param {Element} el\r\n     * @param {Element} target\r\n     * @return {Element}\r\n     * @api private\r\n     */\n    function copyAttributes(el, target) {\n        var attrs = target.attributes;\n        for (var i = 0, len = attrs.length, attr; i < len; i++) {\n            attr = attrs[i];\n            el.setAttribute(attr.name, attr.value);\n        }\n        return el;\n    }\n\n    /**\r\n     * Create a script element that will execute\r\n     *\r\n     * @param {Document} doc\r\n     * @param {Element} el\r\n     * @return {Element}\r\n     * @api private\r\n     */\n    function copyScript(doc, el) {\n        var script = doc.createElement('script');\n        script.async = true;\n        script.text = el.textContent;\n        return copyAttributes(script, el);\n    }\n\n    /**\r\n     * Parse HTML and XML documents\r\n     *\r\n     * @param {String} markup\r\n     * @param {String} type\r\n     * @return {Element}\r\n     * @api private\r\n     */\n    function parseDocument(markup, type) {\n        var parser = new DOMParser();\n        var newDoc = parser.parseFromString(markup, type);\n        return newDoc.removeChild(newDoc.documentElement);\n    }\n\n    /**\r\n     * Parse HTML string using the proper parent\r\n     * element\r\n     *\r\n     * @param {Document} doc\r\n     * @param {String} tag\r\n     * @param {String} html\r\n     * @return {Element}\r\n     * @api private\r\n     */\n    function parseHTML(doc, tag, html) {\n        var el = doc.createElement(tag);\n        el.innerHTML = html;\n        return el;\n    }\n\n    /**\r\n     * Parse an HMTL string into a DOM node\r\n     *\r\n     * @param {Document} doc\r\n     * @param {String} tag\r\n     * @param {String} html\r\n     * @return {Element|DocumentFragment}\r\n     * @api private\r\n     */\n    function parse(doc, tag, html) {\n        // Support <html> elements\n        if (tag === 'html') {\n            if (supportsDOMParserHTML) {\n                return parseDocument(html, 'text/html');\n            }\n            // Attributes of the <html> element do not get\n            // parsed using `innerHTML` here, so we parse it\n            // as XML and then copy the attributes\n            var _el = parseHTML(doc, 'html', html);\n            var xml = parseDocument(html, 'text/xml');\n            return copyAttributes(_el, xml);\n        }\n        // Support <body> and <head> elements\n        if (tag === 'head' || tag === 'body') {\n            var _el2 = parseHTML(doc, 'html', html);\n            return _el2.removeChild(tag === 'head' ? _el2.firstChild : _el2.lastChild);\n        }\n        // Wrap the element in the appropriate container\n        var wrap = wrapMap[tag] || wrapMap._default;\n        // Parse HTML string\n        var el = parseHTML(doc, 'div', wrap[1] + html + wrap[2]);\n        // Descend through wrappers to get the right element\n        var depth = wrap[0];\n        while (depth--) {\n            el = el.lastChild;\n        }\n        // Support executable <script> elements\n        if (tag === 'script') {\n            return copyScript(doc, el.firstChild);\n        }\n        // Single element\n        if (el.childNodes.length === 1) {\n            return el.removeChild(el.firstChild);\n        }\n        // Use a document fragment for multiple elements\n        var frag = doc.createDocumentFragment();\n        while (el.firstChild) {\n            frag.appendChild(el.firstChild);\n        }\n        return frag;\n    }\n\n    /**\r\n     * Convert a string into a DOM node\r\n     *\r\n     * @param {String} html\r\n     * @param {Object} options\r\n     * @param {Document} options.context\r\n     * @param {String} options.type\r\n     * @param {Boolean} options.scripts\r\n     * @return {Element|TextNode|DocumentFragment}\r\n     * @api public\r\n     */\n    function dominate(html) {\n        var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        var _ref$context = _ref.context;\n        var context = _ref$context === undefined ? document : _ref$context;\n        var _ref$type = _ref.type;\n        var type = _ref$type === undefined ? 'html' : _ref$type;\n        var _ref$scripts = _ref.scripts;\n        var scripts = _ref$scripts === undefined ? true : _ref$scripts;\n\n        // Return an XML element if the type param is 'xml'\n        if (type.toLowerCase() === 'xml') {\n            return parseDocument(html, 'text/xml');\n        }\n        // Parse the HTML string for a tag name\n        var match = tagNameRe.exec(html);\n        // If no tag name exists, treat it as plain text\n        if (!match) {\n            return context.createTextNode(html);\n        }\n        // Get the tag name\n        var tag = match[1].toLowerCase();\n        // Parse the HTML string into a DOM node\n        var el = parse(context, tag, html.trim());\n        // If it's a script element, return it as it\n        // should always execute regardless of the\n        // `execScripts` param\n        if (tag === 'script') {\n            return el;\n        }\n        // If `execScripts` is true, replace all script\n        // elements with a new script element to enable\n        // execution, otherwise remove the script elements\n        var elements = el.querySelectorAll('script');\n        for (var i = 0, len = elements.length, script, parent; i < len; i++) {\n            script = elements[i];\n            parent = script.parentNode;\n            if (scripts === false) {\n                parent.removeChild(script);\n            } else {\n                parent.replaceChild(copyScript(context, script), script);\n            }\n        }\n        return el;\n    }\n    module.exports = exports['default'];\n});\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"sourceRoot":"/source/"}